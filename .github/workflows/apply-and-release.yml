name: apply-and-release
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  terragrunt-apply:
    uses: ORG/.github/.github/workflows/terragrunt-apply.yml@v1
    secrets: inherit
    with:
      working-directory: .
      # Optionnel: environnement GitHub pour approbation manuelle
      environment: prod
    # Fallback inline si pas de template:
    # runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   id-token: write
    # steps:
    #   - uses: actions/checkout@v4
    #   - uses: google-github-actions/auth@v2
    #     with:
    #       workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
    #       service_account: ${{ secrets.GCP_TERRAFORM_SA }}
    #   - uses: hashicorp/setup-terraform@v3
    #   - run: |
    #       sudo curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.66.7/terragrunt_linux_amd64 -o /usr/local/bin/terragrunt
    #       sudo chmod +x /usr/local/bin/terragrunt
    #   - name: Apply (run-all)
    #     working-directory: .
    #     env:
    #       TG_STATE_BUCKET: ${{ secrets.TG_STATE_BUCKET }}
    #       TG_STATE_PROJECT: ${{ secrets.TG_STATE_PROJECT }}
    #     run: terragrunt run-all apply --terragrunt-non-interactive -auto-approve

  semantic-release:
    needs: terragrunt-apply
    uses: ORG/.github/.github/workflows/semantic-release.yml@v1
    secrets: inherit
    # Fallback inline si pas de template:
    # runs-on: ubuntu-latest
    # steps:
    #   - uses: actions/checkout@v4
    #   - uses: actions/setup-node@v4
    #     with: { node-version: 20 }
    #   - run: npm ci
    #   - run: npx semantic-release
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
